from scipy.special import expit
import numpy as np


def sigmoid(z):
    """
    Нет никакх причин добавлять эту функцию, можно просто использовать expit()

    :param z: любая матрица
    :return: матрица из элементов, знаения которых находятся в пределах 0..1
    """
    return expit(z)


def predict(theta1, theta2, x):
    """

    :param theta1: весовая матрица первого слоя нейросети
    :param theta2: весовая матрица второго слоя нейросети
    :param x: матрица входных параметров нейросети
        в данном случае каждой строке матрицы соответствует одно изображение
        строка состоит из 400 ячеек, которые представляют собой яркость пикселей изображения 20х20
        разложенные в одну строку
    :return:
    """

    # m - получаем количество строк матрицы входных значения (количество изображений)
    m = x.shape[0]

    # ones - единичная матрица m - строк и 1 столбей
    ones = np.ones((m, 1))

    # a1 - конкатенация единичной матрицы слева от матрицы входных параметров
    a1 = np.c_[ones, x]

    # умножение матрицы входных параметров на матрицу весовых коэффициентов
    z2 = np.dot(a1, theta1.T)

    # функция sigmoid дает на выходе матрицу с элементами уложенными в пределы 0..1
    # результат функции sigmoid это выходные значения первого слоя нейросети и входные значения второго слоя
    # a2 - конкатенация 1й матрицы с матрицей входных параметров для 2го слоя матрицы
    a2 = np.c_[ones, sigmoid(z2)]
    
    # выход 2го уровня матрицы, до обработки сигмойдой
    z3 = np.dot(a2, theta2.T)
    
    # выход второго слоя после обработки сигмойдой
    h_x = sigmoid(z3)
    
    # возвращает индекс наибольшей величины для каждой строки матрицы
    # элемент, значение которого самое большое и есть предполжение нейросети
    p = np.argmax(h_x, axis=1)
    return p
